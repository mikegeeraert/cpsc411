comment "%" ;
comment "/*" "*/";


{-
prog -> block

block -> declarations program_body.

declarations -> declaration SEMICOLON declarations
             |.

declaration -> var_declaration
             | fun_declaration.

var_declaration -> VAR ID array_dimensions COLON type.

type -> INT
      | REAL
      | BOOL. 

array_dimensions -> SLPAR expr SRPAR array_dimensions
             |.

fun_declaration -> FUN ID param_list COLON type  
                                            CLPAR fun_block CRPAR.

fun_block -> declarations fun_body. 

param_list -> LPAR parameters RPAR.

parameters -> basic_declaration more_parameters
            |.

more_parameters -> COMMA  basic_declaration more_parameters
            |.

basic_declaration -> ID basic_array_dimensions COLON type.

basic_array_dimensions -> SLPAR SRPAR basic_array_dimensions
             |.

program_body -> BEGIN prog_stmts END.

fun_body -> BEGIN prog_stmts RETURN expr SEMICOLON END.

prog_stmts -> prog_stmt SEMICOLON prog_stmts
            |.                         
                                        
prog_stmt -> IF expr THEN prog_stmt ELSE prog_stmt
           | WHILE expr DO prog_stmt
           | READ identifier
           | identifier ASSIGN expr
           | PRINT expr
           | CLPAR block CRPAR.

identifier -> ID array_dimensions.

expr ->  expr OR bint_term
       | bint_term.

bint_term -> bint_term AND bint_factor
           | bint_factor.

bint_factor -> NOT bint_factor
             | int_expr compare_op int_expr
             | int_expr.

compare_op -> EQUAL | LT | GT | LE |GE.

int_expr -> int_expr addop int_term
          | int_term.

addop -> ADD | SUB.

int_term -> int_term mulop int_factor
          | int_factor.

mulop -> MUL | DIV.

int_factor -> LPAR expr RPAR
            | SIZE LPAR ID basic_array_dimensions RPAR
            | FLOAT LPAR expr RPAR
            | FLOOR LPAR expr RPAR
            | CEIL LPAR expr RPAR
            | ID modifier_list
            | IVAL
            | RVAL
            | BVAL
            | SUB int_factor.

modifier_list -> LPAR arguments RPAR
           | array_dimensions.

arguments -> expr more_arguments
           |.

more_arguments -> COMMA expr more_arguments
           |.
-}

START.  Start ::= Block;

BProg.  Block ::= Declarations Program_Body;

DSemi.  Declarations ::= Declaration ";" Declarations ;
DEmpty. Declarations ::= ;

DVar.   Declaration ::= Var_Declaration ;
DFun.   Declaration ::= Fun_Declaration ;

VD.     Var_Declaration ::= "var" Ident Array_Dimensions ":" Type ;

TInt.   Type ::= "int" ;
TReal.  Type ::= "real" ;
TBool.  Type ::= "bool" ;

ADExpr. Array_Dimensions ::= "[" Expr "]" Array_Dimensions ;
ADEmpty.Array_Dimensions ::= ;

FDDec.  Fun_Declaration ::= "fun" Ident Param_List ":" Type "{" Fun_Block "}" ;

FB.     Fun_Block ::= Declarations Fun_Body ;

PL.     Param_List ::= "(" Parameters ")" ;

PParams.Parameters ::= Basic_Declaration More_Parameters ;
PEmpty. Parameters ::= ;

MPMore. More_Parameters ::= "," Basic_Declaration More_Parameters ;
MPEmpty.More_Parameters ::= ;

BDBasic.Basic_Declaration ::= Ident Basic_Array_Dimensions ":" Type ;

BAD.    Basic_Array_Dimensions ::= "[" "]" Basic_Array_Dimensions ;
BADEmpty.Basic_Array_Dimensions ::= ;

PBBody. Program_Body ::= "begin" Prog_Stmts "end" ;

FBBody. Fun_Body ::= "begin" Prog_Stmts "return" Expr ";" "end" ;

PSSemi. Prog_Stmts ::= Prog_Stmt ";" Prog_Stmts ;
PSEmpty.Prog_Stmts ::= ;

PSITE.  Prog_Stmt ::= "if" Expr "then" Prog_Stmt "else" Prog_Stmt ;
PSWhile.Prog_Stmt ::= "while" Expr "do" Prog_Stmt ;
PSRead. Prog_Stmt ::= "read" Identifier ;
PSAssign.Prog_Stmt ::= Identifier ":=" Expr ;
PSPrint.Prog_Stmt ::= "print" Expr ;
PSCPar. Prog_Stmt ::= "{" Block "}" ;


ID. 	Identifier ::= Ident Array_Dimensions ;

EOr.	Expr ::= Expr "||" Bint_Term ;
EBint.	Expr ::= Bint_Term ;

BTAnd.	Bint_Term ::= Bint_Term "&&" Bint_Factor ;
BTFactor.Bint_Term ::= Bint_Factor ;

BFNot.	Bint_Factor ::= "not" Bint_Factor ;
BFComp. Bint_Factor ::= Int_Expr Compare_Op Int_Expr ;
BFExpr. Bint_Factor ::= Int_Expr ;

COEq.	Compare_Op ::= "=" ;
COLt.	Compare_Op ::= "<" ;
COGt.	Compare_Op ::= ">" ;
COLe.	Compare_Op ::= "=<" ;
COGe.	Compare_Op ::= ">=" ;

IEAddop.Int_Expr ::= Int_Expr Addop Int_Term ;
IETerm.	Int_Expr ::= Int_Term ;

AAdd. 	Addop ::= "+" ;
ASub.	Addop ::= "-" ;

ITMul.	Int_Term ::= Int_Term Mulop Int_Factor ;
ITFactor.Int_Term ::= Int_Factor;

MMul.	Mulop ::= "*" ;
MDiv.	Mulop ::= "/" ;

IFPar.	Int_Factor ::= "(" Expr ")" ;
IFArray.Int_Factor ::= "size" "(" Ident Basic_Array_Dimensions ")" ;
IFFLoat.Int_Factor ::= "float" "(" Expr ")" ;
IFFloor.Int_Factor ::= "floor" "(" Expr ")" ;
IFCeil. Int_Factor ::= "ceil" "(" Expr ")" ;
IFModList.Int_Factor ::= Ident Modifier_List ;
IFInt.	Int_Factor ::= Integer ;
IFReal. Int_Factor ::= Double ;
IFTrue. Int_Factor ::= "true" ;
IFFalse.Int_Factor ::= "false" ;
IFNeg.	Int_Factor ::= "-" Int_Factor ;

MLArgs. Modifier_List ::= "(" Arguments ")" ;
MLArray.Modifier_List ::= Array_Dimensions ;

AExpr.  Arguments ::= Expr More_Arguments ;
AEmpty. Arguments ::= ;

MAComma.More_Arguments ::= "," Expr More_Arguments ;
MAEmpty.More_Arguments ::= ;