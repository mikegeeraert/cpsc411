module SkelMplus where

-- Haskell module generated by the BNF converter

import qualified AbsMplus as A
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> String
transIdent x = case x of
  Ident string -> string

transStart :: Start -> A.M_Prog
transStart x = case x of
  START block -> transBlock block

transBlock :: Block -> ([A.M_decl], [M_stmt])
transBlock x = case x of
  BProg declarations programbody -> (transDeclarations declarations, transProgram_Body programbody)

transDeclarations :: Declarations -> [A.M_decl]
transDeclarations x = case x of
  DSemi declaration declarations -> (transDeclaration declaration : transDeclarations declarations)
  DEmpty -> []

transDeclaration :: Declaration -> A.M_decl
transDeclaration x = case x of
  DVar vardeclaration -> transVar_Declaration vardeclaration
  DFun fundeclaration -> transFun_Declaration fundeclaration

transVar_Declaration :: Var_Declaration -> A.M_decl
transVar_Declaration x = case x of
  VD ident arraydimensions type_ -> A.M_var (ident, transArray_Dimensions arraydimensions, transType type_)

transType :: Type -> A.M_type
transType x = case x of
  TInt -> M_int
  TReal -> M_real
  TBool -> M_bool

transArray_Dimensions :: Array_Dimensions -> [A.M_expr]
transArray_Dimensions x = case x of
  ADExpr expr arraydimensions -> (transExpr expr, transArray_Dimensions arraydimensions)
  ADEmpty -> []

transFun_Declaration :: Fun_Declaration -> A.M_decl
transFun_Declaration x = case x of
  FDDec ident paramlist type_ funblock -> M_fun (ident, [transParam_List paramlist], transType type_, fst(transFun_Block funblock), snd(transFun_Block funblock))

transFun_Block :: Fun_Block -> ([A.M_decl], [A.M_stmt])
transFun_Block x = case x of
  FB declarations funbody -> (transDeclarations declarations, transFun_Body funbody)

transParam_List :: Param_List -> Result
transParam_List x = case x of
  PL parameters -> failure x

transParameters :: Parameters -> Result
transParameters x = case x of
  PParams basicdeclaration moreparameters -> failure x
  PEmpty -> failure x

transMore_Parameters :: More_Parameters -> Result
transMore_Parameters x = case x of
  MPMore basicdeclaration moreparameters -> failure x
  MPEmpty -> failure x

transBasic_Declaration :: Basic_Declaration -> Result
transBasic_Declaration x = case x of
  BDBasic ident basicarraydimensions type_ -> failure x

transBasic_Array_Dimensions :: Basic_Array_Dimensions -> Result
transBasic_Array_Dimensions x = case x of
  BAD basicarraydimensions -> failure x
  BADEmpty -> failure x

transProgram_Body :: Program_Body -> Result
transProgram_Body x = case x of
  PBBody progstmts -> failure x

transFun_Body :: Fun_Body -> Result
transFun_Body x = case x of
  FBBody progstmts expr -> failure x

transProg_Stmts :: Prog_Stmts -> Result
transProg_Stmts x = case x of
  PSSemi progstmt progstmts -> failure x
  PSEmpty -> failure x

transProg_Stmt :: Prog_Stmt -> Result
transProg_Stmt x = case x of
  PSITE expr progstmt1 progstmt2 -> failure x
  PSWhile expr progstmt -> failure x
  PSRead identifier -> failure x
  PSAssign identifier expr -> failure x
  PSPrint expr -> failure x
  PSCPar block -> failure x

transIdentifier :: Identifier -> Result
transIdentifier x = case x of
  ID ident arraydimensions -> failure x

transExpr :: Expr -> Result
transExpr x = case x of
  EOr expr bintterm -> failure x
  EBint bintterm -> failure x

transBint_Term :: Bint_Term -> Result
transBint_Term x = case x of
  BTAnd bintterm bintfactor -> failure x
  BTFactor bintfactor -> failure x

transBint_Factor :: Bint_Factor -> Result
transBint_Factor x = case x of
  BFNot bintfactor -> failure x
  BFComp intexpr1 compareop intexpr2 -> failure x
  BFExpr intexpr -> failure x

transCompare_Op :: Compare_Op -> Result
transCompare_Op x = case x of
  COEq -> failure x
  COLt -> failure x
  COGt -> failure x
  COLe -> failure x
  COGe -> failure x

transInt_Expr :: Int_Expr -> Result
transInt_Expr x = case x of
  IEAddop intexpr addop intterm -> failure x
  IETerm intterm -> failure x

transAddop :: Addop -> Result
transAddop x = case x of
  AAdd -> failure x
  ASub -> failure x

transInt_Term :: Int_Term -> Result
transInt_Term x = case x of
  ITMul intterm mulop intfactor -> failure x
  ITFactor intfactor -> failure x

transMulop :: Mulop -> Result
transMulop x = case x of
  MMul -> failure x
  MDiv -> failure x

transInt_Factor :: Int_Factor -> Result
transInt_Factor x = case x of
  IFPar expr -> failure x
  IFArray basicarraydimensions -> failure x
  IFFLoat expr -> failure x
  IFFloor expr -> failure x
  IFCeil expr -> failure x
  IFModList ident modifierlist -> failure x
  IFInt integer -> failure x
  IFReal double -> failure x
  IFTrue -> failure x
  IFFalse -> failure x
  IFNeg intfactor -> failure x

transModifier_List :: Modifier_List -> Result
transModifier_List x = case x of
  MLArgs arguments -> failure x
  MLArray arraydimensions -> failure x

transArguments :: Arguments -> Result
transArguments x = case x of
  AExpr expr morearguments -> failure x
  AEmpty -> failure x

transMore_Arguments :: More_Arguments -> Result
transMore_Arguments x = case x of
  MAComma expr morearguments -> failure x
  MAEmpty -> failure x

